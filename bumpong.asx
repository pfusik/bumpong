SOUND	equ	1
DEBUG	equ	0
PADDLE_LEN	equ	12
BALL_SPEED	equ	$50
BALL_FACTOR	equ	2
SCORE_SPEEDUP	equ	5
SCULPT_LEVEL	equ	0
PADDLE_POS	equ	[48-PADDLE_LEN]/2

light	equ	$0e00	; $3100
bumpcode_ptrs	equ	$5400	; $f00
bumpcode	equ	$6300	; < $5500
bumpcode2	equ	bumpcode+$2a6c
screen	equ	$b800	; $780
bumpmap_line_lo	equ	$bf80
bumpmap_line_hi	equ	$bfb0

clock	equ	20
py	equ	$16	; 2
ball_x	equ	$18	; 2
ball_y	equ	$1a	; 2
ball_dx	equ	$1c
ball_dy	equ	$1d
controllers	equ	$1e	; 2
light_ptrs	equ	$20	; 100*2

src	equ	$e8	; 2
dest	equ	$ea	; 2
tmp	equ	$ec	; 2
col	equ	$ee
row	equ	$ef
hi	equ	$f0
lo	equ	$f1
sculpt_mask	equ	$f2	; 2
cnt	equ	$f2	; init only
y2	equ	$f2	; init only

	org	$3f00
dy2light_ptrs
:49	dta	light_ptrs+4*#
:104	dta	light_ptrs+4*49
:103	dta	light_ptrs
bumpmap
;:1960	dta	$ff
	ins	'bumpmap.gr9'
	ins	'bumpmap.gr9',-40
status_line
	dta	d'      bumpong       '
scroll_text
:48	dta	d' '
	dta	d'Game for two players                        '
	dta	d'Use joysticks                               '
	dta	d'Press Start or Fire                         '
	dta	d'If you cannot find joysticks, use arrow keys and Select/Option            '
	dta	d"Design and programming by Piotr '0xF' Fusik             "
;	dta	d"Music by Lukasz 'X-Ray' Sychowicz                       "
	dta	d'First presented at WAP-NIAK 2012                        '
	dta	d'Greetings to:  Agenda, LaResistance, Tristesse, Mad Team, SSG, Lamers, Sword Soft, MEC, Slight, New Generation, Rumun, Sikor, Lewis, XXL, Jakub Husak, JAC!, Kaz, TDC, Ramos, Marok, Drac030, Innuendo, Jellonek, PG, Joy, Bob!k, Henryk, Grzybson, Stryker, Xeen, Cosi, Cobra, Jubanka, Pet, Yerzmyey, rest of Taquart!'
scroll_end
:48	dta	d' '
	ert	[*^scroll_text]>>12!=0
dl 
	dta	$70,$70,$c6,a(status_line),$6f,a(screen),$0f
:22	dta	$2f,$0f
	dta	$2f,$8f
scroll_dl
	dta	$52,a(scroll_text)
	dta	$41,a(dl)

main
	mva	#1	$244
	sei
	mva	#0	^4e
	sta	^40
	ldx	#29
	sta:rpl	^00,x-
	sta	clock
:SOUND	jsr	detect_stereo
	jsr	bumpcode_create
	jsr	light_create
	mva	#PADDLE_POS	py
	sta	py+1
	jsr	sculpt_paddles
	jsr	ball_center
	mva	#BALL_SPEED	ball_dx
	mva	#0	ball_dy
	jsr	light_set
	jsr	bumpcode	; avoid trash on screen
	jsr	bumpcode2
	jsr	get_controllers

	lda:rne	^4b
	mwa	#dli	$200
	mva	#$80	^4e
	mva	#$22	^40
	mwa	#dl	^42
	mva	#$f	^17

demo
	mva	#$52	scroll_dl
	jsr	scroll_start

demo_loop
	lda	clock
	lsr	@
	tax
	jsr	color_score
	jsr	scroll_move
	lda	^1f
	and	^10
	and	^11
	bne	demo_loop

:SOUND	mva	#sound_start-sounds	current_sound
	mwa	#dl	scroll_dl+1
	mva	#$41	scroll_dl
	jsr	ball_center
	mva	#0	ball_dx
	sta	ball_dy
	ldy	#2
	jsr	hide_score
	mva	#$10	status_line
	mva	#0	status_line+1
	sta	status_line+18
	mva	#$d0	status_line+19
	jsr	show_score
	ldx	#BALL_SPEED
	lda	^2a
	lsr	@
	scc:ldx	#-BALL_SPEED
	sub	#$40
	stx	ball_dx
	sta	ball_dy

game_loop
	ldy	#0
	lda	#79
	cmp:rcs	ball_x+1
	smi:iny

:SOUND	mva	sound_score,y	current_sound
	jsr	hide_score
	ldx	mul19,y
	lda	status_line,x
	and	#$3f
	cmp	#$19
	bcs	game_over
	inc	status_line,x
	jsr	show_score
	lda	#79
	cmp:rcc	ball_x+1
	ift	SCORE_SPEEDUP
; max score => ball speed
	lda	status_line+19
	and	#$3f
	cmp	status_line
	scs:lda	status_line
	tax
	lda	score2dx-$10,x
	bit	ball_dx
	bpl	speedup_ok
	eor	#$ff
	add	#1
speedup_ok
	sta	ball_dx
	eif
	jmp	game_loop

game_over
	tya
	bne	player2_won
	mvx	#$11	status_line
	dex:stx	status_line+1
	jmp	demo
player2_won
	mvx	#$d1	status_line+18
	dex:stx	status_line+19
	jmp	demo

wait
	lda	clock
	cmp:req	clock
	rts

; y=0 left
; y=1 right
; y=2 both
color_score
	jsr	wait
	cpy	#1
	seq:stx	^16
	scc:stx	^19
	rts

hide_score
	ldx	#$f
hide_score_1
	jsr	color_score
	dex
	bpl	hide_score_1
	rts

show_score
	ldx	#0
show_score_1
	jsr	color_score
	inx
	cpx	#$10
	bcc	show_score_1
	rts

dli_bottom
	lda	#1
	sta	^4a
	sta	^1b
	pla:rti

dli
	pha
	bit	^4b
	bvs	dli_bottom
	txa:pha
	tya:pha
	sta	^4a
	mva	#13	^45
	mva	#$43	^45
	sta	^1b
	lda	clock
	lsr	@
	bcs	second_frame
	jsr	bumpcode
	ldx	#1
	jsr	paddle_move
:SOUND	jsr	play_sound
	jmp	dli_done

second_frame
	jsr	bumpcode2
	jsr	ball_move
:DEBUG	mva	^4b	$608
	jsr	light_set
:DEBUG	mva	^4b	$609
	jsr	get_controllers
	ldx	#0
	jsr	paddle_move
dli_done
	inc	clock
	pla:tay
	pla:tax
	pla:rti

ball_center
	mwa	#$2800	ball_x
	mwa	#$3000	ball_y
	rts

ball_move
	ldy	#BALL_FACTOR
ball_move_1
	ldx	ball_x+1
	lda	ball_dx
	bpl	ball_bounce_right
	cpx	#3
	bpl	ball_bounce_x_no
	cpx	#0
	bpl	ball_bounce_paddle1
	cpx	#-23
	bcs	ball_bounce_x_no
	bcc	ball_bounce_center	; jmp
ball_bounce_paddle1
	ldx	#0
	bpl	ball_bounce_paddle	; jmp
ball_bounce_right
	cpx	#76
	bcc	ball_bounce_x_no
	cpx	#80
	bcc	ball_bounce_paddle2
	cpx	#102
	bcc	ball_bounce_x_no
ball_bounce_center
	jsr	ball_center
	jmp	ball_bounce_x_yes
ball_bounce_paddle2
	ldx	#1
ball_bounce_paddle
	lda	ball_y+1
	lsr	@
	sub	py,x
	add	#2
	cmp	#PADDLE_LEN+2
	bcs	ball_bounce_x_no
:SOUND	mva	sound_hit,x	current_sound
ball_bounce_x_yes
	lda	#0
	sub:sta	ball_dx
ball_bounce_randomize
	ldx	^2a
	cpx	#$80	; overflows and escapes the top border!
	beq	ball_bounce_randomize
	stx	ball_dy
ball_bounce_x_no
	lda	ball_dx
	asl	@
	ldx	#0
	scc:dex
	add:sta	ball_x
	txa
	adc:sta	ball_x+1

	ldx	ball_y+1
	lda	ball_dy
	bpl	ball_bounce_y_bottom
	cpx	#6
	bpl	ball_bounce_y_no
	bmi	ball_bounce_y_yes	; jmp
ball_bounce_y_bottom
	cpx	#88
	bcc	ball_bounce_y_no
ball_bounce_y_yes
	ift	SOUND
; don't interrupt score sound
	ldx	current_sound
	lda	sounds,x
	sne:mva	#sound_bounce-sounds	current_sound
	eif
	lda	#0
	sub:sta	ball_dy
ball_bounce_y_no
	asl	@
	ldx	#0
	scc:dex
	add:sta	ball_y
	txa
	adc:sta	ball_y+1

	dey
	jne	ball_move_1
	rts

get_controllers
	ldx	#3
	lda	#4
	bit	^2f
	bne	paddle1_nokey
	lda	^29
	and	#$3f
	cmp	#$0e
	beq	paddle1_keyup
	cmp	#$0f
	bne	paddle1_nokey
	dex
paddle1_keyup
	dex
paddle1_nokey
	txa
	and	^30
	sta	controllers

	lda	^1f
	and	#6
	cmp	#4
	scc:eor	#5
	sta	controllers+1
	lda	^30
:4	lsr	@
	and:sta	controllers+1
	rts

paddle_move
	ldy	py,x
	lda	controllers,x
	cmp	#2
	bne	paddle_noup
	cpy	#3+1
	bcc	paddle_noup
	dey
	bcs	paddle_domove	; jmp
paddle_noup
	cmp	#1
	bne	paddle_nodown
	cpy	#46-PADDLE_LEN
	bcs	paddle_nodown
	iny
paddle_domove
	sty	py,x
	dey:dey
	sty	row
:DEBUG	mva	^4b	$602,x
:3	jsr	sculpt_paddle_row
	lda	#PADDLE_LEN-3
	add:sta	row
:3	jsr	sculpt_paddle_row
:DEBUG	mva	^4b	$604,x
paddle_nodown
	rts

sculpt_paddles
	mva	#PADDLE_POS-1	row
sculpt_paddles_1
	ldx	#0
	jsr	sculpt_paddle_row
	dec	row
	inx
	jsr	sculpt_paddle_row
	lda	row
	cmp	#PADDLE_POS+PADDLE_LEN
	bcc	sculpt_paddles_1
	rts

sculpt_paddle_row
	lda	row
	sub	py,x
	cmp	#PADDLE_LEN
	ldy	#0
	scs:ldy	paddle_mask,x
	sty	sculpt_mask
	add	#1
	cmp	#PADDLE_LEN
	ldy	#0
	scs:ldy	paddle_mask,x
	sty	sculpt_mask+1
	lda	paddle_col,x
	jsr	sculpt_byte
	lda	col
	adc	#2	; add
	jsr	sculpt_byte
	inc	row
	rts

; a=0..78 row=0..47
; sculpt_mask  =%xxx-----
; sculpt_mask+1=%xx------
sculpt_byte
	sta	col
	lsr	@
	ldy	row
	adc	bumpmap_line_lo,y	; add
	sta	src
	sta	tmp
	lda	#0
	adc	bumpmap_line_hi,y
	sta	src+1
	adc	>bumpcode_ptrs/2-bumpmap	; add
	asl	tmp
	rol	@
	sta	tmp+1
	ldy	#1
	mva	(tmp),y-	dest+1
	mva	(tmp),y	dest

	lda	#SCULPT_LEVEL
	bit	sculpt_mask
	bmi	sculpt_hi
	lda	(src),y
:4	lsr	@
sculpt_hi
	sta	hi
	lda	#SCULPT_LEVEL
	bvs	sculpt_lo
	lda	(src),y
	and	#$f
sculpt_lo
	sta	lo

	add	col
	sub	hi
	spl:lda	#0
	ldy	#1
	sta	(dest),y
	lda	#SCULPT_LEVEL
	asl	sculpt_mask+1
	bcs	sculpt_bottomhi
	ldy	#40
	lda	(src),y
:4	lsr	@
	sec
sculpt_bottomhi
	sbc	hi
	add	row
	tay:lda	dy2light_ptrs,y
	ldy	#3
	sta	(dest),y

	lda	sculpt_mask
:2	asl	@
	sta	sculpt_mask
	asl	@
	lda	#SCULPT_LEVEL
	bcs	sculpt_righthi
:SCULPT_LEVEL!=0	lda	#0
	ldy	col
	cpy	#78
	bcs	sculpt_rightmost
	ldy	#1
	lda	(src),y
:4	lsr	@
	sec
sculpt_righthi
	sbc	lo	; sub
sculpt_rightmost
	sec
	adc	col
	spl:lda	#0
	ldy	#5
	sta	(dest),y
	lda	#SCULPT_LEVEL
	asl	sculpt_mask+1
	bcs	sculpt_bottomlo
	ldy	#40
	lda	(src),y
	and	#$f
	sec
sculpt_bottomlo
	sbc	lo	; sub
	add	row
	tay:lda	dy2light_ptrs,y
	add	#2
	ldy	#7
	sta	(dest),y
	rts

light_set
	lda	#128
	sub	ball_x+1
	tax
	lda	#94
	sub	ball_y+1
	and	#$7e
	asl	@
	adc	<light_lines	; add
	sta	light_set_2+1
	lda	#0
	adc	>light_lines
	sta	light_set_2+2
	ldy	#200
light_set_1
	dey
light_set_2
	mva	light_lines,y	light_ptrs,y-
	stx	light_ptrs,y
	bne	light_set_1
	rts

scroll_move
	lda	clock
	and	#3
	eor	#$f
	sta	^44
	cmp	#$f
	bcc	scroll_ret
	inw	scroll_dl+1
	lda	scroll_dl+1
	cmp	<scroll_end
	lda	scroll_dl+2
	sbc	>scroll_end
	bcc	scroll_ret
scroll_start
	mwa	#scroll_text	scroll_dl+1
scroll_ret
	rts

bumpcode_create
	mwa	#bumpmap	src
	mwa	#bumpcode	dest
	ldy	#0
	jsr	bumpcode_create_frame
	inw	dest
	ldy	#24
bumpcode_create_frame
	mva	#40	cnt
bumpcode_create_row
	sty	row
	mva	src	bumpmap_line_lo,y
	mva	src+1	bumpmap_line_hi,y
	ldx	#0
bumpcode_create_byte
	dec	cnt
	bne	bumpcode_create_novscroltrick
	ldy	#12
	mva:rpl	bumpcode_create_vscroltrick,y	(dest),y-
	lda	#13
	add:sta	dest
	scc:inc	dest+1
	mva	#41	cnt
bumpcode_create_novscroltrick

	lda	(src),0
:4	lsr	@
	sta	hi
	lda	(src),y
	and	#$f
	sta	lo

	mva	#{ldy #}	(dest),y+
	txa
	asl	@
	sta	col
	adc	lo	; add
	sub	hi
	spl:lda	#0
	sta	(dest),y+
	mva	#{lda (),y}	(dest),y
	ldy	#40
	lda	(src),y
:4	lsr	@
	sub	hi
	add	row
	tay:lda	dy2light_ptrs,y
	ldy	#3
	sta	(dest),y+

	mva	#{ldy #}	(dest),y
	lda	#0
	cpx	#39
	bcs	bumpcode_create_rightmost
	ldy	#1
	lda	(src),y
:4	lsr	@
	sub	lo
	sec
bumpcode_create_rightmost
	adc	col
	spl:lda	#0
	ldy	#5
	sta	(dest),y+
	mva	#{eor (),y}	(dest),y
	ldy	#40
	lda	(src),y
	and	#$f
	sub	lo
	add	row
	tay:lda	dy2light_ptrs,y
	add	#2
	ldy	#7
	sta	(dest),y+

	mva	#{sta screen}	(dest),y+
	mva	src	(dest),y+
	sta	tmp
	lda	src+1
	adc	>screen-bumpmap	; add
	sta	(dest),y
	add	>bumpcode_ptrs/2-screen
	ert	[bumpcode_ptrs&$1ff]!=0
	asl	tmp
	rol	@
	sta	tmp+1
	mva	dest	(tmp),0+
	mva	dest+1	(tmp),y

	inw	src
	lda	#11
	add:sta	dest
	scc:inc	dest+1
	inx
	cpx	#40
	jcc	bumpcode_create_byte
	ldy	row
	iny
	cpy	#24
	beq	bumpcode_create_rts
	cpy	#48
	jcc	bumpcode_create_row
bumpcode_create_rts
	mva	#{rts}	(dest),0
	rts

light_create
	lda	>light
light_create_line
	sta	light_create_hi0+2
	sta	light_create_hi1+2
	sta	light_create_hi2+2
	add	#1
	sta	light_create_lo0+2
	sta	light_create_lo1+2
	sta	light_create_lo2+2
	sub	>light+$100
	lsr	@
	tax
	mva	sqr,x	y2
	lda:tay	#0
light_clear
light_create_hi0	sta	$8000,y
light_create_lo0	sta	$8000,y
	iny:bne	light_clear
	ldx	#23
light_create_pixel
	lda	sqr,x
	add	y2
	bcs	light_create_black
	ldy	#24
light_create_sqrt
	dey
	cmp	sqr,y
	bcc	light_create_sqrt
	lda	dist2light,y
	ldy	sub128r,x
light_create_lo1	sta	$8080,x
light_create_lo2	sta	$8000,y
:4	asl	@
light_create_hi1	sta	$8080,x
light_create_hi2	sta	$8000,y
light_create_black
	dex
	bpl	light_create_pixel
	lda	light_create_hi0+2
	add	#2
	cmp	>light+$3000
	bcc	light_create_line
	lda:tay	#0
	sta:rne	light+$3000,y+
	rts

	ift	SOUND
detect_stereo
	ldx #$00
	stx $d20f     ;halt pokey 0
	stx $d21f     ;halt pokey 1
	ldy #$03
	sty $d21f     ;release pokey 1

	lda $d20a     ;see if pokey 0 is halted ($d20a = $ff)
detect_stereo_1
	and $d20a
	inx
	bne detect_stereo_1

	sty $d20f

	cmp #$ff
	bne detect_stereo_1_mono
	sta	stereo
detect_stereo_1_mono
	rts

play_sound
	ldx	#sound_no-sounds
current_sound	equ	*-1
	lda	sounds,x
	beq	play_sound_silence
	bit	stereo
	bmi	play_sound_stereo
:4	lsr	@
	ora	sounds,x
	and	#$f
	eor	#$a0
	sta	$d211
	bne	play_sound_cont	; jmp
play_sound_stereo
	and	#$f
	eor	#$a0
	sta	$d211
	lda	sounds,x
:4	lsr	@
	eor	#$a0
play_sound_cont
	sta	^21
	inx
	mva	sounds,x+	$d210
	sta	^20
	stx	current_sound
play_sound_done
	rts
play_sound_silence
	sta	$d211
	sta	^21
	rts
	eif

bumpcode_create_vscroltrick
	sta	^4a
	mva	#13	^45
	mva	#3	^45

	ift	SOUND
sounds
sound_bounce
:4	dta	$55-17*#,$80
	dta	0
sound_hitleft
:6	dta	$70-16*#,$60
	dta	0
sound_hitright
:6	dta	$07-#,$40
	dta	0
sound_scoreleft
:20	dta	$50,$50-#
	dta	0
sound_scoreright
:20	dta	$05,$40+#
	dta	0
sound_start
:6	dta	$70-16*#,$40
:6	dta	$07-#,$50
:6	dta	$77-17-#,$60
sound_no
	dta	0
sound_hit	dta	sound_hitleft-sounds,sound_hitright-sounds
sound_score	dta	sound_scoreleft-sounds,sound_scoreright-sounds
stereo	dta	0
	eif

paddle_col	dta	0,76
paddle_mask	dta	$e0,$30
mul19	dta	0,19
	ift	SCORE_SPEEDUP
score2dx
:10	dta	BALL_SPEED+SCORE_SPEEDUP*#
	ert	BALL_SPEED+SCORE_SPEEDUP*9>$7f
	eif

sqr
:23	dta	#*#/2
	dta	255
dist2light
:24	dta	15-#*2/3
sub128r
:24	dta	128-#

light_lines
:24*4	dta	48+>light
:23	dta	46-2*#+>light,46-2*#+>light,47-2*#+>light,47-2*#+>light
:24*2	dta	#+>light,#+>light
:28*4	dta	48+>light

	ert	*>bumpcode_ptrs

	run	main
	end
