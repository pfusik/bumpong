DEBUG	equ	0
BALL_SPEED	equ	2
PADDLE_LEN	equ	16
SCULPT_LEVEL	equ	0
PADDLE_POS	equ	[48-PADDLE_LEN]/2
EXIT_TO_DOS	equ	1	; not safe because we destroy page zero

bumpcode_ptrs	equ	$3e00	; $f00
bumpmap_line_lo	equ	$4d00
bumpmap_line_hi	equ	$4d30
bumpcode	equ	$4e00	; < $5500
bumpcode2	equ	bumpcode+$2a6c
light	equ	$a300	; $1100
screen	equ	$b400	; $780

clock	equ	20
ball_x	equ	$38	; 2
ball_y	equ	$3a	; 2
ball_dx	equ	$3c
ball_dy	equ	$3d
light_ptrs	equ	$40	; 80*2

src	equ	$e0	; 2
dest	equ	$e2	; 2

col	equ	$e4
row	equ	$e5
hi	equ	$e6
lo	equ	$e7
tmp	equ	$e8	; 2
sculpt_mask	equ	$ea	; 2
sculpt_shape	equ	$ec
cnt	equ	$ea
y2	equ	$eb
hi_left	equ	$ec
hi_right	equ	$ed
lo_left	equ	$ee
lo_right	equ	$ef
py	equ	$f0	; 2
controllers	equ	$f2	; 2
score_color	equ	$f4
game_state	equ	$f6	; 0=player1 scores, 1=player2 scores, 2=demo, -1=play

	org	$2a00
bumpmap
;:1960	dta	$ff
	ins	'bumpmap.gr9'
	ins	'bumpmap.gr9',-40
status_line
	dta	d'      bumpong       '
scroll_text
:48	dta	d' '
	dta	d'Game for two players                        '
	dta	d'Use joysticks                               '
	dta	d'Press Start or Fire                         '
	dta	d'If you cannot find joysticks, use arrow keys and Select/Option            '
	dta	d"Design and programming by Piotr '0xF' Fusik             "
;	dta	d"Music by Lukasz 'X-Ray' Sychowicz                       "
	dta	d'First presented at WAP-NIAK 2012                        '
	dta	d'Greetings to:  Agenda, LaResistance, Tristesse, Mad Team, SSG, Lamers, Sword Soft, MEC, Slight, New Generation, Rumun, Sikor, Lewis, XXL, Jakub Husak, JAC!, Kaz, TDC, Ramos, Marok, Drac030, Innuendo, Jellonek, PG, Joy, Bob!k, Henryk, Grzybson, Stryker, Xeen, Cosi, Cobra, Jubanka, Pet, Yerzmyey, rest of Taquart!'
scroll_end
:48	dta	d' '
	ert	[*^scroll_text]>>12!=0
dl 
	dta	$70,$70,$c6,a(status_line),$6f,a(screen),$0f
:22	dta	$2f,$0f
	dta	$2f,$8f
scroll_dl
	dta	$52,a(scroll_text)
	dta	$41,a(dl)

main
	jsr	bumpcode_create
	jsr	light_create
	mva	#PADDLE_POS	py
	sta	py+1
	jsr	sculpt_paddles

	sei
	jsr	wait
	ift	EXIT_TO_DOS
	lda:pha	$201
	lda:pha	$200
	eif
	mwa	#dli	$200
	mva	#$22	^40
	mva	#$80	^4e
	mwa	#dl	^42
	ldx	#29
	lda	#0
	sta:rpl	^00,x-
	sta	clock
	mva	#$f	^17

	mwa	#$2800	ball_x
	mwa	#$3000	ball_y
	mva	#$40	ball_dx
	mva	#0	ball_dy
	jsr	light_set
	mva	#0	score_color

demo
	mva	#2	game_state
	mva	#$52	scroll_dl
	mwa	#scroll_text	scroll_dl+1

demo_loop
	jsr	wait
	jsr	scroll_move

	ift	EXIT_TO_DOS
	lda	#4
	bit	^2f
	bne	no_dos
	lda	^29
	and	#$3f
	cmp	#$1c
	bne	no_dos
	mva	#0	^40
	mva	#$40	^4e
	pla:sta	$200
	pla:sta	$201
	cli
	rts
no_dos
	eif

	lda	^1f
	and	^10
	and	^11
	bne	demo_loop

	mwa	#dl	scroll_dl+1
	mva	#$41	scroll_dl

	ldx	score_color
	beq	score_hidden
start_game_1
	jsr	wait
	jsr	ball_gocenter
	dex
	stx	^16
	stx	^19
	bne	start_game_1
score_hidden
	mva	#$10	status_line
	mva	#0	status_line+1
	sta	status_line+18
	mva	#$d0	status_line+19
start_game_2
	jsr	wait
	jsr	ball_gocenter
	cpx	#$f
	bcs	start_game_21
	inx
	stx	^16
	stx	^19
start_game_21
	lda	ball_dx
	ora	ball_dy
	bne	start_game_2

	lda	^2a
	and	#$80
	ora	#$40
	sta	ball_dx
	lda	^2a
	lsr	@
	sub	#$40
	sta	ball_dy
next_ball
	mva	#-1	game_state

game_loop
	ldx:rmi	game_state

	ldy	mul19,x
	lda	#1
	add:sta	status_line,y
	and	#$3f
	cmp	#$1a
	bcc	next_ball

	txa
	bne	player2_won
	mvy	#$11	status_line
	dey:sty	status_line+1
	jmp	demo
player2_won
	mvy	#$d1	status_line+18
	dey:sty	status_line+19
	jmp	demo

wait
	lda	clock
	cmp:req	clock
	rts

dli_bottom
	lda	#1
	sta	^4a
	sta	^1b
	pla:rti

dli
	pha
	bit	^4b
	bvs	dli_bottom
	txa:pha
	tya:pha
	sta	^4a
	mva	#13	^45
	mva	#$43	^45
	sta	^1b
	lda	clock
	lsr	@
	bcs	bumpcode_bottom
	jsr	bumpcode
	jsr	paddle_move
	jmp	bumpcode_done

bumpcode_bottom
	jsr	bumpcode2
:DEBUG	mva	^4b	$600
	lda	#0
	jsr	sculpt_ball
:DEBUG	mva	^4b	$606
	jsr	ball_move
:DEBUG	mva	^4b	$607
	lda	#$70
	jsr	sculpt_ball
:DEBUG	mva	^4b	$608
	jsr	light_set
:DEBUG	mva	^4b	$609
bumpcode_done
	inc	clock
	pla:tay
	pla:tax
	pla:rti

ball_gocenter
	lda	#$28
	sub	ball_x+1
	ift	1
	asl	@
	els
	ora	#$7f
	spl:eor	#$70
	eif
	sta	ball_dx
	lda	#$30
	sub	ball_y+1
	ift	1
	asl	@
	els
	ora	#$7f
	spl:eor	#$70
	eif
	sta	ball_dy
	rts

ball_move
	ldy	#BALL_SPEED
ball_move_1
	ldx	ball_x+1
	lda	ball_dx
	bpl	ball_bounce_x_right
	cpx	#3
	bpl	ball_bounce_x_no
	bit	game_state
	bpl	ball_bounce_x_yes
	lda	ball_y+1
	lsr	@
	sub	py
	add	#2
	cmp	#PADDLE_LEN+2
	bcc	ball_bounce_x_yes
	mva	#1	game_state
	bcs	ball_bounce_x_no	; jmp
ball_bounce_x_right
	cpx	#76
	bcc	ball_bounce_x_no
	bit	game_state
	bpl	ball_bounce_x_yes
	lda	ball_y+1
	lsr	@
	sub	py+1
	add	#2
	cmp	#PADDLE_LEN+2
	bcc	ball_bounce_x_yes
	mva	#0	game_state
ball_bounce_x_yes
	lda	#0
	sub:sta	ball_dx
ball_bounce_randomize
	ldx	^2a
	cpx	#$80	; overflows and escapes the top border!
	beq	ball_bounce_randomize
	stx	ball_dy
ball_bounce_x_no
	lda	ball_dx
	asl	@
	ldx	#0
	scc:dex
	add:sta	ball_x
	txa
	adc:sta	ball_x+1

ball_bounce_y
	ldx	ball_y+1
	lda	ball_dy
	bpl	ball_bounce_y_bottom
	cpx	#6
	bpl	ball_bounce_y_no
	bmi	ball_bounce_y_yes	; jmp
ball_bounce_y_bottom
	cpx	#88
	bcc	ball_bounce_y_no
ball_bounce_y_yes
	eor	#$ff
	add	#1
	sta	ball_dy
ball_bounce_y_no
	asl	@
	ldx	#0
	scc:dex
	add:sta	ball_y
	txa
	adc:sta	ball_y+1

	dey
	jne	ball_move_1
	rts

sculpt_ball
	sta	sculpt_shape
	lda	ball_x+1
	and	#1
	sne:lsr	sculpt_shape
	lda	ball_y+1
	lsr	@
	add	#2
	sta	row
	ldx	#3
sculpt_ball_line
	lda	sculpt_shape
	and	sculpt_ball_masks,x
	sta	sculpt_mask
	lda	sculpt_shape
	and	sculpt_ball_masks+1,x
	sta	sculpt_mask+1
	lda	ball_x+1
	sub	#1
	and	#$fe
:3	jsr	sculpt_byte
	dec	row
	dex
	bpl	sculpt_ball_line
	rts

paddle_move
	ldx	#3
	lda	#4
	bit	^2f
	bne	paddle1_nokey
	lda	^29
	and	#$3f
	cmp	#$0e
	beq	paddle1_keyup
	cmp	#$0f
	bne	paddle1_nokey
	dex
paddle1_keyup
	dex
paddle1_nokey
	txa
	and	^30
	sta	controllers

	lda	^1f
	and	#6
	cmp	#4
	scc:eor	#5
	sta	controllers+1
	lda	^30
:4	lsr	@
	and:sta	controllers+1

	ldx	#1
paddle_move_player
	ldy	py,x
	lda	controllers,x
	cmp	#2
	bne	paddle_noup
	cpy	#3+1
	bcc	paddle_noup
	dey
	bcs	paddle_domove	; jmp
paddle_noup
	cmp	#1
	bne	paddle_nodown
	cpy	#46-PADDLE_LEN
	bcs	paddle_nodown
	iny
paddle_domove
	sty	py,x
	dey:dey
	sty	row
:DEBUG	mva	^4b	$602,x
:3	jsr	sculpt_paddle_row
	lda	#PADDLE_LEN-3
	add:sta	row
:3	jsr	sculpt_paddle_row
:DEBUG	mva	^4b	$604,x
paddle_nodown
	dex
	bpl	paddle_move_player
	rts

sculpt_paddles
	mva	#PADDLE_POS-1	row
sculpt_paddles_1
	ldx	#0
	jsr	sculpt_paddle_row
	dec	row
	inx
	jsr	sculpt_paddle_row
	lda	row
	cmp	#PADDLE_POS+PADDLE_LEN
	bcc	sculpt_paddles_1
	rts

sculpt_paddle_row
	lda	row
	sub	py,x
	cmp	#PADDLE_LEN
	ldy	#0
	scs:ldy	paddle_mask,x
	sty	sculpt_mask
	add	#1
	cmp	#PADDLE_LEN
	ldy	#0
	scs:ldy	paddle_mask,x
	sty	sculpt_mask+1
	lda	paddle_col,x
:2	jsr	sculpt_byte
	inc	row
	rts

; a=0..78 row=0..47
; sculpt_mask  =%xxx-----
; sculpt_mask+1=%xx------
sculpt_byte
	sta	col
	lsr	@
	ldy	row
	adc	bumpmap_line_lo,y	; add
	sta	src
	sta	tmp
	lda	#0
	adc	bumpmap_line_hi,y
	sta	src+1
	adc	>bumpcode_ptrs/2-bumpmap	; add
	asl	tmp
	rol	@
	sta	tmp+1
	ldy	#1
	mva	(tmp),y-	dest+1
	mva	(tmp),y	dest

	lda	#SCULPT_LEVEL
	bit	sculpt_mask
	bmi	sculpt_hi
	lda	(src),y
:4	lsr	@
sculpt_hi
	sta	hi
	lda	#SCULPT_LEVEL
	bvs	sculpt_lo
	lda	(src),y
	and	#$f
sculpt_lo
	sta	lo

	add	col
	sub	hi
	spl:lda	#0
	ldy	#1
	sta	(dest),y
	lda	#SCULPT_LEVEL
	asl	sculpt_mask+1
	bcs	sculpt_bottomhi
	ldy	#40
	lda	(src),y
:4	lsr	@
	sec
sculpt_bottomhi
	sbc	hi
	add	row
	spl:lda	#0
	asl	@
:light_ptrs!=0	adc	#light_ptrs	; add
	ldy	#3
	sta	(dest),y

	lda	sculpt_mask
:2	asl	@
	sta	sculpt_mask
	asl	@
	lda	#SCULPT_LEVEL
	bcs	sculpt_righthi
:SCULPT_LEVEL!=0	lda	#0
	ldy	col
	cpy	#78
	bcs	sculpt_rightmost
	ldy	#1
	lda	(src),y
:4	lsr	@
	sec
sculpt_righthi
	sbc	lo	; sub
sculpt_rightmost
	sec
	adc	col
	spl:lda	#0
	add	#96
	ldy	#5
	sta	(dest),y
	lda	#SCULPT_LEVEL
	asl	sculpt_mask+1
	bcs	sculpt_bottomlo
	ldy	#40
	lda	(src),y
	and	#$f
	sec
sculpt_bottomlo
	sbc	lo	; sub
	add	row
	spl:lda	#0
	asl	@
:light_ptrs!=0	adc	#light_ptrs	; add
	ldy	#7
	sta	(dest),y
	lda	col
	add	#2
	rts

light_set
	lda	#80
	sub	ball_x+1
	tax
	lda	#94
	sub	ball_y+1

	add	<light_lines
	sta	light_set_2+1
	lda	#0
	adc	>light_lines
	sta	light_set_2+2
	ldy	#160
light_set_1
	dey
light_set_2
	mva	light_lines,y	light_ptrs,y-
	stx	light_ptrs,y
	bne	light_set_1
	rts

scroll_move
	lda	clock
	and	#3
	eor	#$f
	sta	^44
	cmp	#$f
	bcc	scroll_ret
	inw	scroll_dl+1
	lda	scroll_dl+1
	cmp	<scroll_end
	lda	scroll_dl+2
	sbc	>scroll_end
	bcc	scroll_ret
scroll_start
	mwa	#scroll_text	scroll_dl+1
scroll_ret
	rts

bumpcode_create
	mwa	#bumpmap	src
	mwa	#bumpcode	dest
	ldy	#0
	jsr	bumpcode_create_frame
	inw	dest
	ldy	#24
bumpcode_create_frame
	mva	#40	cnt
bumpcode_create_row
	sty	row
	mva	src	bumpmap_line_lo,y
	mva	src+1	bumpmap_line_hi,y
	ldx	#0
bumpcode_create_byte
	dec	cnt
	bne	bumpcode_create_novscroltrick
	ldy	#12
	mva:rpl	bumpcode_create_vscroltrick,y	(dest),y-
	lda	#13
	add:sta	dest
	scc:inc	dest+1
	mva	#41	cnt
bumpcode_create_novscroltrick

	lda	(src),0
:4	lsr	@
	sta	hi
	lda	(src),y
	and	#$f
	sta	lo

	mva	#{ldy #}	(dest),y+
	txa
	asl	@
	sta	col
	adc	lo	; add
	sub	hi
	spl:lda	#0
	sta	(dest),y+
	mva	#{lda (),y}	(dest),y
	ldy	#40
	lda	(src),y
:4	lsr	@
	sub	hi
	add	row
	spl:lda	#0
	asl	@
:light_ptrs!=0	adc	#light_ptrs	; add
	ldy	#3
	sta	(dest),y+

	mva	#{ldy #}	(dest),y
	lda	#0
	cpx	#39
	bcs	bumpcode_create_rightmost
	ldy	#1
	lda	(src),y
:4	lsr	@
	sub	lo
	sec
bumpcode_create_rightmost
	adc	col
	spl:lda	#0
	add	#96
	ldy	#5
	sta	(dest),y+
	mva	#{eor (),y}	(dest),y
	ldy	#40
	lda	(src),y
	and	#$f
	sub	lo
	add	row
	spl:lda	#0
	asl	@
:light_ptrs!=0	adc	#light_ptrs	; add
	ldy	#7
	sta	(dest),y+

	mva	#{sta screen}	(dest),y+
	mva	src	(dest),y+
	sta	tmp
	lda	src+1
	add	>screen-bumpmap
	sta	(dest),y
	add	>bumpcode_ptrs/2-screen
	ert	[bumpcode_ptrs&$1ff]!=0
	asl	tmp
	rol	@
	sta	tmp+1
	mva	dest	(tmp),0+
	mva	dest+1	(tmp),y

	inw	src
	lda	#11
	add:sta	dest
	scc:inc	dest+1
	inx
	cpx	#40
	jcc	bumpcode_create_byte
	ldy	row
	iny
	cpy	#24
	beq	bumpcode_create_rts
	cpy	#48
	jcc	bumpcode_create_row
bumpcode_create_rts
	mva	#{rts}	(dest),0
	rts

light_create
	mva	<light	dest
	lda	>light
light_create_line
	sta	dest+1
	sub	>light
	tax
	lda	sqr,x
	sta	y2
	lda:tay	#0
	sta:rne	(dest),y+
	ldx	#15
light_create_pixel
	stx	col
	txa
	eor	#80
	sta	hi_right
	eor	#$ff
	sec:adc	#2*80
	sta	hi_left
	add	#96
	sta	lo_left
	eor	#$ff
	sec:adc	<2*176
	sta	lo_right
	ldy	#15
	lda	sqr,x
	add	y2
	bcs	light_create_black
	iny
light_create_sqrt
	dey
	cmp	sqr,y
	bcc	light_create_sqrt
light_create_black
	tya
	eor	#$f
	ldy	lo_left
	sta	(dest),y
	ldy	lo_right
	sta	(dest),y
:4	asl	@
	ldy	hi_left
	sta	(dest),y
	ldy	hi_right
	sta	(dest),y
	ldx	col
	dex
	bpl	light_create_pixel
	lda	dest+1
	add	#1
	cmp	>light+$1000
	bcc	light_create_line
	lda:tay	#0
	sta:rne	light+$1000,y+
	rts

bumpcode_create_vscroltrick
	sta	^4a
	mva	#13	^45
	mva	#3	^45

sculpt_ball_masks	dta	0,$ff,$ff,$ff,0
paddle_col	dta	0,76
paddle_mask	dta	$e0,$30
mul19	dta	0,19

sqr
:16	dta	#*#

light_lines
:32*2	dta	16+>light
:15*2	dta	16-#/2+>light
:16*2	dta	#/2+>light
:42*2	dta	16+>light

	ert	*>bumpcode_ptrs

	run	main
	end
